// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TGMiniApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006165111_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomenclatureID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("QuantityMeters")
                        .HasColumnType("REAL");

                    b.Property<double>("QuantityTons")
                        .HasColumnType("REAL");

                    b.Property<string>("StockID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Nomenclature", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<double>("Diameter")
                        .HasColumnType("REAL");

                    b.Property<string>("FormOfLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gost")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDCat")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDFunctionType")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IDTypeNew")
                        .HasColumnType("TEXT");

                    b.Property<double>("Koef")
                        .HasColumnType("REAL");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("PipeWallThickness")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductionType")
                        .HasColumnType("TEXT");

                    b.Property<double>("ProfileSize2")
                        .HasColumnType("REAL");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SteelGrade")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Nomenclatures");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("INN")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Price", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDStock")
                        .HasColumnType("TEXT");

                    b.Property<double>("NDS")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceLimitM1")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceLimitM2")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceLimitT1")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceLimitT2")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceM")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceM1")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceM2")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceT")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceT1")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceT2")
                        .HasColumnType("REAL");

                    b.HasKey("ID", "IDStock");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("ProductType", b =>
                {
                    b.Property<string>("IDType")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDParentType")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDType");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Remnant", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDStock")
                        .HasColumnType("TEXT");

                    b.Property<double>("AvgTubeLength")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgTubeWeight")
                        .HasColumnType("REAL");

                    b.Property<double>("InStockM")
                        .HasColumnType("REAL");

                    b.Property<double>("InStockT")
                        .HasColumnType("REAL");

                    b.Property<double>("ReservedM")
                        .HasColumnType("REAL");

                    b.Property<double>("ReservedT")
                        .HasColumnType("REAL");

                    b.Property<double>("SoonArriveM")
                        .HasColumnType("REAL");

                    b.Property<double>("SoonArriveT")
                        .HasColumnType("REAL");

                    b.Property<bool>("UnderTheOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID", "IDStock");

                    b.ToTable("Remnants");
                });

            modelBuilder.Entity("Stock", b =>
                {
                    b.Property<string>("IDStock")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CardPayment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CashPayment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConsigneeCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("FIASId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDDivision")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerInn")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerKpp")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerShortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RailwayStation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Schedule")
                        .HasColumnType("TEXT");

                    b.Property<string>("StockCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StockName")
                        .HasColumnType("TEXT");

                    b.HasKey("IDStock");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("CartItem", b =>
                {
                    b.HasOne("Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
